data Maybe a = Just a | Nothing

p = Just("just")
s = Just(p)


where(s) {
  is Just k        : k
  is Just (Just x) : x
  is Just (Nothing): "1"
}

x = 3 == 5

where(x) {
  is true: "YOUHOU"
  is _   : "Not YOUHOU"
} |> IO.log

data R = R { x :: Num }
r = R({ x: 42 })
where(r) {
  is R { x: x }: x
} |> IO.log

data User = User String String Num | Anonymous
u = User("john", "smith", 32)

where(u)
  is User _ n m: m + 48 |> IO.log

  is Anonymous : 1 |> IO.log

where(u) {
  is User _ n m: m + 48 |> IO.log

  is Anonymous : 1 |> IO.log
}

true ? 1 |> IO.log : 2 + 3 |> IO.log
if (true) 1 |> IO.log else 2 + 3 |> IO.log
if (true) { 1 |> IO.log } else { 2 + 3 |> IO.log }

true ? 1 : 2 + 3 |> IO.log
if (true) 1 else 2 + 3 |> IO.log
if (true) { 1 } else { 2 + 3 |> IO.log }

4
  |> (x) => (x)
  |> (x) => (x + 1)
  |> (x) => (true ? 1 : 2 + 3 |> IO.log)
  |> IO.log


true
  ? "ok"
  : "not ok"

1 == 2 ? "ok" : "not ok"
where(3)
  is 3: 48
  is n: 1|> (x) => (x + 1)
where("3")
  is "3": 48
  is n: 1

|> (x) => (x + 1) |> IO.log


(1 == 2 ? "ok" : "not ok")
  |> (x) => (x)
  |> (x) => (x == "ok" ? 1 : 10)
  |> (x) => (x)


fn4 = (b) => (
  where(b) {
    is Just x: x
  }
)

fn4(Just(3))
