-- Prelude stuff:
print :: a -> b
print = (a) => #- { console.log(a); return a; } -#

data Future e a = Bad e
                | Good a


of :: a -> Future e a
of = (a) => #- Promise.resolve(a) -#

map :: (a -> b) -> Future e a -> Future e b
map = (f, x) => #- x.then(f) -#

mapErr :: (e -> f) -> Future e a -> Future f a
mapErr = (f, x) => #- x.catch(f) -#

run :: (e -> f) -> (a -> b) -> Future e a -> a
run = (bad, good, x) => #- x.then(good).catch(bad) -#


-- Actual code:
of(3)
  |> map((x) => x * 2)
  |> run(print, print)
