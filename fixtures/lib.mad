// import L from "List"
import IO from "IO"

// ap :: List (a -> b) -> a -> List b
// export ap = (fns, a) => pipe(L.map((fn) => fn(a)))(fns)


// data Maybe a = Just a | Nothing

// (where(<Just(3), Just(4)>)
//   is <Just n, Just m>: n + m) |> IO.log

data User = User String Number

alias Comparable a = { eq :: a -> a -> Boolean }

numberComparable :: Comparable Number
numberComparable = { eq: (a, b) => a == b }

userComparable :: Comparable User
userComparable = {
  eq: (a, b) => where(<a, b>)
    is <User name1 age1, User name2 age2>:
      (name1 == name2) && (age1 == age2)
}


eq :: Comparable a -> a -> a -> Boolean
eq = (comp, a, b) => comp.eq(a, b)

eq(numberComparable, 3, 3) |> IO.log
eq(userComparable, User("John", 3), User("John", 4)) |> IO.log
