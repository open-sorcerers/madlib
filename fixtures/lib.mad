import L  from "List"
import IO from "IO"
import F  from "Future"

id :: a -> a
id = (a) => (a)

double :: Num -> Num
double = (n) => (n * 2)

// F.of([3, 4])
//   |> F.map(L.map(double))
//   |> F.run(IO.log, IO.log)

L.singleton(3) |> L.map((x) => (x + 1)) |> IO.log

t = (x) => (if (x) { False } else { True })

F.of(True)
  |> F.map((x) => (if (x) { 2 } else { 4 }))
  |> F.map((x) => (x * 2))
  |> F.run((x) => (x), IO.log)


a = { x: 3 }
b = { y: 4 }
c = { ...a, ...b }

c.x + c.y

total = (a) => (a.x + a.y)


data A = A (Num -> Num)

p = A((x) => (x + 1))



where(p) {
  is A f: f(3)
} |> IO.log


data Maybe a = Just a | Nothing

(Nothing :: Maybe a)
(Just(3) :: Maybe Num)

(1 + 1 :: Num) |> IO.log

IO.log(!False)

data User
  = LoggedIn String
  | Anonymous

userDisplayName = (u) => (where(u) {
  is LoggedIn name: name
  is Anonymous    : "Anonymous"
})


fib = (n) => (if (n < 2) { n } else { fib(n - 1) + fib(n - 2) })

fib(8) |> IO.log


if (1 < 2) { 1 } else { (1 - 1) + (1 - 2) }

fn = (x) => (x + 1)

fn(1)
