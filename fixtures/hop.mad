// interface Show a {
//   show :: a -> String
// }

// instance Show Number {
//   show = (a) => (#- a.toString() -#)
// }
data Maybe a = Just a | Nothing

data Either e a = Right a | Left e

interface Monad m {
  chain :: (a -> m b) -> m a -> m b
  of :: a -> m a
}

instance Monad Maybe {
  chain = (f) => where
    is Just x : f(x)
    is Nothing: Nothing

  of = (x) => Just(x)
}

instance Monad (Either e) {
  chain = (f) => where
    is Right x: f(x)
    is Left e : Left(e)

  of = (x) => Right(x)
}

interface Read a {
  read :: String -> a
}

instance Read Number {
  read = (x) => (#- -#)
}


chain((x) => Just(x + 1), Just(3))

doIt = (x) => map((k) => k + 1, x)

doIt(Just(3))

// read("3")
doIt([3])
doIt(Right(3))

Just(3) |> chain((x) => Just(x + 1))

map((x) => x + 1, Just(3))
map((x) => x + 1, [1, 2, 3])

// show(Just(true))

// show(3)
