import W from "Wish"
import IO from "IO"
import S from "System"
import String from "String"
import L from "List"
import Maybe from "Maybe"
import F from "Function"

testFilePath :: W.Wish String String
testFilePath = S.getArgs
    |> W.chain((args) => (where(L.nth(0, args)) {
        is Maybe.Just testPath: W.of(testPath)
        is Maybe.Nothing      : W.bad("Test file not given !")
    }))

madlibPath :: W.Wish String String
madlibPath = S.getEnv("MADLIB_PATH") |> W.chainRej((x) => (W.of("madlib")))

prepare :: W.Wish e <String, String, String>
prepare = [testFilePath, madlibPath]
  |> W.parallel
  |> W.map((x) => (where(x) {
      is [entry, madlib]:
        < entry
        , String.replace("(.*\/)(.*).mad$", ".tests/$2.mjs", entry)
        , madlib
        >
  }))

prepare
  |> W.chain((input) => (where(input) {
       is <entry, dest, madlib>:
         S.exec(madlib ++ " compile -i " ++ entry ++ " -o .tests/")
           |> W.chain((x) => (S.spawn("node " ++ dest)))
           |> W.mapRej((rej) => (where(rej) {
                is S.CommandError _ msg: msg
              }))
           |> W.chain((x) => (
                S.exec("rm -r .tests") |> W.chain((a) => (W.of(x)))
              ))
     }))
  |> W.fulfill(IO.err, F.identity)
