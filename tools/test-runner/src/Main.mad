import W from "Wish"
import IO from "IO"
import S from "System"
import String from "String"
import L from "List"
import Maybe from "Maybe"
import F from "Function"

testFilePath :: W.Wish String String
testFilePath = W.chain(
  pipe(
    L.nth(0),
    where
      is Maybe.Just path: W.of(path)
      is Maybe.Nothing  : W.bad("Test file not given !")
  )
)(S.getArgs)

madlibPath :: W.Wish String String
madlibPath = S.getEnv("MADLIB_PATH") |> W.chainRej((x) => (W.of("madlib")))

prepare :: W.Wish e <String, String, String>
prepare = pipe(
  W.parallel,
  W.map(where
    is [entry, madlib]: < entry
                        , String.replace("(.*\/)(.*).mad$"
                        , ".tests/$2.mjs", entry), madlib
                        >
  )
)([testFilePath, madlibPath])

prepare
  |> W.chain(where {
       is <entry, dest, madlib>:
         S.exec(madlib ++ " compile -i " ++ entry ++ " -o .tests/")
           |> W.chain((x) => (S.spawn("node " ++ dest)))
           |> W.mapRej((rej) => where(rej) is S.CommandError _ msg: msg)
           |> W.chain((x) => S.exec("rm -r .tests") |> W.andDo(W.of(x)))
     })
  |> W.fulfill(IO.err, F.identity)
