import L from "List"
import W from "Wish"
import Math from "Math"
import IO from "IO"
import Http from "Http"
import B from "Binary"
import { readFile, writeFile, BinaryData } from "FileSystem"
import M from "Map"
import { Just } from "Maybe"
import J from "Json"
import E from "Either"
import S from "System"
import { always, flip } from "Function"
import { andDo } from "Monad"


MADLIB_NOT_FOUND = "The madlib.json file was not found, verify that you have created one or that you run the command from the right directory."
MADLIB_MODULES_PATH = "./madlib_modules/"

dneppam = flip(mappend)

buildUnzipCmd :: String -> String
buildUnzipCmd = (pkg) => pipe(
  always("unzip -d "),
  dneppam(MADLIB_MODULES_PATH),
  dneppam(pkg),
  dneppam("-tmp ./madlib_modules/"),
  dneppam(pkg),
  dneppam(".zip")
)(pkg)

unzipPkg :: String -> W.Wish S.CommandError String
unzipPkg = pipe(
  buildUnzipCmd,
  S.exec
)

getDependencies :: String -> W.Wish String (M.Map String String)
getDependencies = pipe(
  J.parse(J.field("dependencies", J.map(J.string))),
  where
    is E.Left e : W.bad(e)
    is E.Right a: of(a)
)

displayPackagesToInstall :: List String -> List String
displayPackagesToInstall = (pkgs) => pipe(
  map(mappend("  - ")),
  mappend(["Packages to install:"]),
  L.unlines,
  IO.log,
  always(pkgs)
)(pkgs)

installPackages :: String -> ()
installPackages = pipe(
  readFile,
  W.mapRej((_) => MADLIB_NOT_FOUND),
  chain(getDependencies),
  chain((depMap) => pipe(
      M.keys,
      displayPackagesToInstall,
      map((key) => pipe(
        (k) => M.get(k, depMap),
        where
          is Just p : Http.get(p),
        map(where is Http.Response { body: Http.BinaryBody d }: d),
        map(BinaryData),
        chain(writeFile(key ++ ".zip")),
        chain((a) => S.exec("mv " ++ a ++ " ./madlib_modules/")),
        andDo(unzipPkg(key)),
        andDo(S.exec("mv ./madlib_modules/" ++ key ++ "-tmp/* ./madlib_modules/" ++ key ++ "-tmp/" ++ key)),
        andDo(S.exec("cp -R ./madlib_modules/" ++ key++"-tmp/"++key++" ./madlib_modules/")),
        andDo(S.exec("rm -r ./madlib_modules/" ++ key ++ ".zip ./madlib_modules/" ++ key ++ "-tmp")),
        map((a) => "package " ++ key ++ " installed"),
        W.mapRej((_) => "Error installing package '" ++ key ++ "'")
      )(key)),
      W.parallel
    )(depMap)
  ),
  W.fulfill(IO.log, map(IO.log))
)


IO.log("Installing dependencies ...")
installPackages("madlib.json")
