import L from "List"
import { Wish, chainRej, mapRej, parallel, fulfill, bad } from "Wish"
import Math from "Math"
import IO from "IO"
import Http from "Http"
import B from "Binary"
import { readFile, writeFile, BinaryData, exists } from "FileSystem"
import M from "Map"
import { Just } from "Maybe"
import J from "Json"
import E from "Either"
import S from "System"
import { always, flip } from "Function"
import { andDo } from "Monad"


MADLIB_NOT_FOUND = "The madlib.json file was not found, verify that you have created one or that you run the command from the right directory."
MADLIB_MODULES_PATH = "./madlib_modules/"

moveToMadlibModules :: String -> Wish S.CommandError String
moveToMadlibModules = pipe(
  (archivePath) => `mv ${archivePath} ${MADLIB_MODULES_PATH}`,
  S.exec
)

unzipPkg :: String -> Wish S.CommandError String
unzipPkg = pipe(
  (pkg) => `unzip -d ${MADLIB_MODULES_PATH}${pkg}-tmp ${MADLIB_MODULES_PATH}${pkg}.zip`,
  S.exec
)

renameInnerFolder :: String -> Wish S.CommandError String
renameInnerFolder = pipe(
  (pkg) => `mv ${MADLIB_MODULES_PATH}${pkg}-tmp/* ${MADLIB_MODULES_PATH}${pkg}-tmp/${pkg}`,
  S.exec
)

copyPackage :: String -> Wish S.CommandError String
copyPackage = pipe(
  (pkg) => `cp -R ${MADLIB_MODULES_PATH}${pkg}-tmp/${pkg} ${MADLIB_MODULES_PATH}`,
  S.exec
)

cleanUp :: String -> Wish S.CommandError String
cleanUp = pipe(
  (pkg) => `rm -r ${MADLIB_MODULES_PATH}${pkg}.zip ${MADLIB_MODULES_PATH}${pkg}-tmp`,
  S.exec
)

getDependencies :: String -> Wish String (M.Map String String)
getDependencies = pipe(
  J.parse(J.field("dependencies", J.map(J.string))),
  where
    is E.Left e : bad(e)
    is E.Right a: of(a)
)

displayPackagesToInstall :: List String -> List String
displayPackagesToInstall = (pkgs) => pipe(
  map(mappend("  - ")),
  mappend(["Packages to install:"]),
  L.unlines,
  IO.log,
  always(pkgs)
)(pkgs)

processArchive :: String -> Wish S.CommandError String
processArchive = (pkgName) => pipe(
  unzipPkg,
  andDo(renameInnerFolder(pkgName)),
  andDo(copyPackage(pkgName)),
  andDo(cleanUp(pkgName))
)(pkgName)

installNodeModules :: String -> Wish S.CommandError String
installNodeModules = (pkg) => pipe(
  (pkg) => `${MADLIB_MODULES_PATH}${pkg}/`,
  (path) => exists(`${path}package.json`) |> andDo(of(path)),
  map(mappend("npm install ")),
  chain(S.exec),
  map((x) => IO.log(`nodejs modules installed for '${pkg}'`) |> always(x)),
  chainRej((_) => of(IO.log(`No node modules to install for '${pkg}'`)))
)(pkg)

initMadlibModulesFolder :: String -> a -> Wish String a
initMadlibModulesFolder = (path, a) => pipe(
  (p) => S.exec(`mkdir -p ${p}`),
  mapRej(where is S.CommandError _ msg: msg),
  andDo(of(a))
)(path)


installPackages :: String -> ()
installPackages = pipe(
  readFile,
  mapRej((_) => MADLIB_NOT_FOUND),
  chain(initMadlibModulesFolder(MADLIB_MODULES_PATH)),
  chain(getDependencies),
  chain((depMap) => pipe(
      M.keys,
      displayPackagesToInstall,
      map((key) => pipe(
        (k) => M.get(k, depMap),
        where is Just p : Http.get(p),
        map(where is Http.Response { body: Http.BinaryBody d }: d),
        map(BinaryData),
        chain(writeFile(`${MADLIB_MODULES_PATH}${key}.zip`)),
        andDo(processArchive(key)),
        andDo(installNodeModules(key)),
        map((_) => `package ${key} installed`),
        mapRej((_) => `Error installing package '${key}'`)
      )(key)),
      parallel
    )(depMap)
  ),
  fulfill(IO.log, map(IO.log))
)


IO.log("Installing dependencies ...")
installPackages("madlib.json")
