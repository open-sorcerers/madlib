Right
  AST
    { aimports = []
    , aexps =
        [ Solved
            (TComp "path" "Wish" [ TCon CNum , TCon CNum ])
            (Area (Loc 56 2 1) (Loc 86 2 31))
            (App
               (Solved
                  (TArr
                     (TArr
                        (TArr (TVar [] (TV "b")) (TVar [] (TV "c")))
                        (TArr
                           (TArr (TVar [] (TV "c")) (TVar [] (TV "b"))) (TVar [] (TV "c"))))
                     (TComp "path" "Wish" [ TVar [] (TV "b") , TVar [] (TV "c") ]))
                  (Area (Loc 56 2 1) (Loc 60 2 5))
                  (Var "Wish"))
               (Solved
                  (TArr
                     (TArr (TCon CNum) (TCon CNum))
                     (TArr (TArr (TCon CNum) (TCon CNum)) (TCon CNum)))
                  (Area (Loc 61 2 6) (Loc 85 2 30))
                  (Abs
                     "bad"
                     [ Solved
                         (TArr (TArr (TCon CNum) (TVar [] (TV "f"))) (TVar [] (TV "f")))
                         (Area (Loc 61 2 6) (Loc 85 2 30))
                         (Abs
                            "good"
                            [ Solved
                                (TVar [] (TV "f"))
                                (Area (Loc 77 2 22) (Loc 84 2 29))
                                (App
                                   (Solved
                                      (TVar [] (TV "e"))
                                      (Area (Loc 77 2 22) (Loc 81 2 26))
                                      (Var "good"))
                                   (Solved
                                      (TCon CNum) (Area (Loc 82 2 27) (Loc 83 2 28)) (LNum "3"))
                                   True)
                            ])
                     ]))
               True)
        ]
    , atypedecls =
        [ ADT
            { adtname = "Wish"
            , adtparams = [ "e" , "a" ]
            , adtconstructors =
                [ Constructor
                    "Wish"
                    [ TRArr
                        (TRArr (TRSingle "e") (TRSingle "m"))
                        (TRArr (TRArr (TRSingle "a") (TRSingle "m")) (TRSingle "m"))
                    ]
                ]
            , adtexported = True
            }
        ]
    , apath = Just "path"
    }