// file: path
const toString = (fn, args = []) => () => (
  `curry(${fn.toString()})${args.length > 0 ? `(${args.join(`,`)})` : ``}`
)
const curryPowder = (fn) => {
  function curried(...args) {
    const length = args.length
    function saucy(...args2) {
      return curried.apply(this, args.concat(args2))
    }
    saucy.toString = toString(fn, args)
    return (
      length >= fn.length ?
      fn.apply(this, args) :
      saucy
    )
  }
  curried.toString = toString(fn)
  return curried
};


const __eq = (l, r) => {
  if (l === r) {
    return true;
  }
  if (typeof l !== typeof r) {
    return false;
  }
  if (typeof l === `object`) {
    if (Array.isArray(l)) {
      return l.reduce((res, _, i) => res && __eq(l[i], r[i]), true);
    }
    const keysL = Object.keys(l);
    const keysR = Object.keys(r);
    return keysL.length === keysR.length && keysL.reduce((res, k) => res && __eq(l[k], r[k]), true);
  }
  return l === r;
}
const Just = curryPowder((a) => ({ __constructor: "Just", __args: [ a ] }));
const Nothing = curryPowder(() => ({ __constructor: "Nothing", __args: [  ] }));
export const fn = curryPowder((b, c) => b + c);
const inc = curryPowder((x) => x + 1);
const dec = curryPowder((x) => x - 1);
const double = curryPowder((x) => x * 2);
const half = curryPowder((x) => x / 2);
double(half(3));
__eq(3, 5);
const response = ({ users: ([]) });
const users = response.users;
const carResponse = ({ cars: ([]) });
const allResponses = ({ ...response, ...carResponse });
((__x__) => {
  if (true && __x__.users.__constructor === "List" && true) {
    const { users: { __args: [a] }, cars: cs } = __x__;
    return cs;
  }
  else if (true) {
    return ([]);
  }
})(allResponses);
((__x__) => {
  if (typeof __x__ === "number") {
    return 3;
  }
})(3);
((__x__) => {
  if (typeof __x__ === "string") {
    return 3;
  }
})(`3`);
((__x__) => {
  if (typeof __x__ === "boolean") {
    return 3;
  }
})(true);
((__x__) => {
  if (__x__ === 3) {
    return 3;
  }
})(3);
((__x__) => {
  if (__x__ === "3") {
    return 3;
  }
})(`3`);
((__x__) => {
  if (__x__ === true) {
    return 3;
  }
})(true);
const log = curryPowder((a) => { console.log(a); return a; });
(true ? `OK` : `NOT OK`);
const mapMaybe = curryPowder((f, m) => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    const x = __x__.__args[0];
    return Just(f(x));
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
})(m));
const might = Just(3);
const x = ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    const x = __x__.__args[0];
    return x;
  }
  else if (__x__.__constructor === "Nothing") {
    return 1;
  }
})(might);
true && false;
false || true;
false || true && false;
1 > 3;
1 < 3;
1 > 3 && 3 < 1 || true;
1 >= 3;
1 <= 3;
1 >= 3 && 3 <= 1 || true;
!(false);
!(true);
!(false) && !(true);
!(false) || !(true);
const arr = ([1, 2, 3]);
const all = ([ ...arr, 4, 5, 6]);
((__x__) => {
  if (__x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3) {
    const [,,] = __x__;
    return 1;
  }
  else if (__x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && true) {
    const [,,n] = __x__;
    return n;
  }
  else if (__x__.length === 2 && true && __x__[1] === 3) {
    const [n,] = __x__;
    return n;
  }
  else if (__x__.length === 3 && true && true && true) {
    const [x,y,z] = __x__;
    return x + y + z;
  }
  else if (__x__.length === 0) {
    const [] = __x__;
    return 0;
  }
})(([1, 2, 3, 5, 8]));
export const map = curryPowder((f, xs) => ((__x__) => {
  if (__x__.length === 3 && true && true && true) {
    const [a,b,c] = __x__;
    return ([f(a),  ...map(f, ([b, c]))]);
  }
  else if (__x__.length === 2 && true && true) {
    const [a,b] = __x__;
    return ([f(a),  ...map(f, ([b]))]);
  }
  else if (__x__.length === 1 && true) {
    const [a] = __x__;
    return ([f(a)]);
  }
  else if (__x__.length === 0) {
    const [] = __x__;
    return ([]);
  }
})(xs));
(true ? `ok` : `not ok`);
curryPowder((x) => x)(curryPowder((x) => (__eq(x, `ok`) ? 1 : 10))(curryPowder((x) => x)((__eq(1, 2) ? `ok` : `not ok`))));
(__eq(1, 2) ? `ok` : `not ok`);
((__x__) => {
  if (__x__ === 3) {
    return 48;
  }
  else if (true) {
    const n = __x__;
    return curryPowder((x) => x + 1)(1);
  }
})(3);
curryPowder((x) => x + 1)(((__x__) => {
  if (__x__ === "3") {
    return 48;
  }
  else if (true) {
    const n = __x__;
    return 1;
  }
})(`3`));
curryPowder((x) => x)(((__x__) => {
  if (__x__.length >= 2 && __x__[0] === 2 && true) {
    const [,...rest] = __x__;
    return rest;
  }
  else if (__x__.length >= 4 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3 && true) {
    const [,,,...rest] = __x__;
    return rest;
  }
})(([1, 2, 3, 4, 5])));
((__x__) => {
  if (__x__.name === "Bob") {
    const {  } = __x__;
    return `Bob`;
  }
  else if (true && true) {
    const { x: x, ...b } = __x__;
    return b.name;
  }
})(({ x: 4, name: `John` }));
const addXAndY = curryPowder((r) => ((__x__) => {
  if (true && true) {
    const { y: y, x: x } = __x__;
    return x + y;
  }
})(r));
const fnTCHOU = curryPowder((x) => x.a.b.c.d.e);
const crazyRecordPattern = curryPowder((r) => ((__x__) => {
  if (true && true && true) {
    const { x: { y: { y: y }, ...k }, ...c } = __x__;
    return y + k.z + c.o + c.i;
  }
})(r));
const tup = ([1, 2, 3]);
__eq(([1, 2, 3]), ([1, 2, 3]));
((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [a,b] = __x__;
    return a + b;
  }
})(([1, 2]));
const fn = curryPowder((a) => ([a, a]));
const fst = curryPowder((tuple) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [a,] = __x__;
    return a;
  }
})(tuple));
const snd = curryPowder((tuple) => ((__x__) => {
  if (__x__.length === 2 && true && true) {
    const [,b] = __x__;
    return b;
  }
})(tuple));
fst(([1, 2]));
snd(([1, 2]));
export default { fn, map };
