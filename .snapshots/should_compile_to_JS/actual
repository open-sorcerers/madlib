// file: path
const __buildCtorParam = n => {
  if (typeof n === "string") {
    return { type: "String", value: n };
  } else {
    return { type: "", value: n };
  }
};

const Just = a => ({ __constructor: "Just", __args: [ __buildCtorParam(a) ] });
const Nothing = { __constructor: "Nothing" };
export const fn = (b => (c => (b) + (c)));
const inc = (x => (x) + (1));
const dec = (x => (x) - (1));
const double = (x => (x) * (2));
const half = (x => (x) / (2));
const true = true;
const false = false;
double(half(3));
(3) === (5);
const response = { users: [] };
const users = response.users;
const carResponse = { cars: [] };
const allResponses = { ...response, ...carResponse };
((__x__) => {
  if (true && __x__.users.__constructor === "List" && true) {
    const { cars: cs } = __x__;
    return cs;
  }
  else if (true) {
    return [];
  }
})(allResponses);
((__x__) => {
  if (typeof __x__ === "number") {
    return 3;
  }
})(3);
((__x__) => {
  if (typeof __x__ === "string") {
    return 3;
  }
})("3");
((__x__) => {
  if (typeof __x__ === "boolean") {
    return 3;
  }
})(true);
((__x__) => {
  if (__x__ === 3) {
    return 3;
  }
})(3);
((__x__) => {
  if (__x__ === "3") {
    return 3;
  }
})("3");
((__x__) => {
  if (__x__ === true) {
    return 3;
  }
})(true);
const log = (a => { console.log(a); return a; });
(true ? "OK" : "NOT OK");
const mapMaybe = (f => (m => ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    const x = __x__.__args[0].value;
    return Just(f(x));
  }
  else if (__x__.__constructor === "Nothing") {
    return Nothing;
  }
})(m)));
const might = Just(3);
const x = ((__x__) => {
  if (__x__.__constructor === "Just" && true) {
    const x = __x__.__args[0].value;
    return x;
  }
  else if (__x__.__constructor === "Nothing") {
    return 1;
  }
})(might);
(true) && (false);
(false) || (true);
(false) || ((true) && (false));
(1) > (3);
(1) < (3);
(((1) > (3)) && ((3) < (1))) || (true);
(1) >= (3);
(1) <= (3);
(((1) >= (3)) && ((3) <= (1))) || (true);
!(false);
!(true);
(!(false)) && (!(true));
(!(false)) || (!(true));
const arr = [1, 2, 3];
const all = [ ...arr, 4, 5, 6];
((__x__) => {
  if (__x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3) {
    const [,,] = __x__;
    return 1;
  }
  else if (__x__.length === 3 && __x__[0] === 1 && __x__[1] === 2 && true) {
    const [,,n] = __x__;
    return n;
  }
  else if (__x__.length === 2 && true && __x__[1] === 3) {
    const [n,] = __x__;
    return n;
  }
  else if (__x__.length === 3 && true && true && true) {
    const [x,y,z] = __x__;
    return ((x) + (y)) + (z);
  }
  else if (__x__.length === 0) {
    const [] = __x__;
    return 0;
  }
})([1, 2, 3, 5, 8]);
export const map = (f => (xs => ((__x__) => {
  if (__x__.length === 3 && true && true && true) {
    const [a,b,c] = __x__;
    return [f(a),  ...map(f)([b, c])];
  }
  else if (__x__.length === 2 && true && true) {
    const [a,b] = __x__;
    return [f(a),  ...map(f)([b])];
  }
  else if (__x__.length === 1 && true) {
    const [a] = __x__;
    return [f(a)];
  }
  else if (__x__.length === 0) {
    const [] = __x__;
    return [];
  }
})(xs)));
(true ? "ok" : "not ok");
(x => x)((x => ((x) === ("ok") ? 1 : 10))((x => x)(((1) === (2) ? "ok" : "not ok"))));
((1) === (2) ? "ok" : "not ok");
((__x__) => {
  if (__x__ === 3) {
    return 48;
  }
  else if (true) {
    const n = __x__;
    return (x => (x) + (1))(1);
  }
})(3);
(x => (x) + (1))(((__x__) => {
  if (__x__ === "3") {
    return 48;
  }
  else if (true) {
    const n = __x__;
    return 1;
  }
})("3"));
(x => x)(((__x__) => {
  if (__x__.length >= 2 && __x__[0] === 2 && true) {
    const [,...rest] = __x__;
    return rest;
  }
  else if (__x__.length >= 4 && __x__[0] === 1 && __x__[1] === 2 && __x__[2] === 3 && true) {
    const [,,,...rest] = __x__;
    return rest;
  }
})([1, 2, 3, 4, 5]));
((__x__) => {
  if (__x__.name === "Bob") {
    const {  } = __x__;
    return "Bob";
  }
  else if (true && true) {
    const { x: x, ...b } = __x__;
    return b.name;
  }
})({ x: 4, name: "John" });
export default { fn, map };
