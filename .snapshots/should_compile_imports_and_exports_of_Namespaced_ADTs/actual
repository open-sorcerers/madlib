// file: ./ADTs
const toString = (fn, args = []) => () => (
  `curry(${fn.toString()})${args.length > 0 ? `(${args.join(`,`)})` : ``}`
)
const curryPowder = (fn) => {
  function curried(...args) {
    const length = args.length
    function saucy(...args2) {
      return curried.apply(this, args.concat(args2))
    }
    saucy.toString = toString(fn, args)
    return (
      length >= fn.length ?
      fn.apply(this, args) :
      saucy
    )
  }
  curried.toString = toString(fn)
  return curried
};

export const Just = curryPowder((a) => ({ __constructor: "Just", __args: [ a ] }));
export const Nothing = curryPowder(() => ({ __constructor: "Nothing", __args: [  ] }));
export default { Just, Nothing };
// file: ./Module
import ADTs from "./ADTs.mjs";

const toString = (fn, args = []) => () => (
  `curry(${fn.toString()})${args.length > 0 ? `(${args.join(`,`)})` : ``}`
)
const curryPowder = (fn) => {
  function curried(...args) {
    const length = args.length
    function saucy(...args2) {
      return curried.apply(this, args.concat(args2))
    }
    saucy.toString = toString(fn, args)
    return (
      length >= fn.length ?
      fn.apply(this, args) :
      saucy
    )
  }
  curried.toString = toString(fn)
  return curried
};

ADTs.Just(3);
ADTs.Nothing;
export const fn = curryPowder((m) => m);
export const fn2 = curryPowder((m) => ((__x__) => {
  if (__x__.__constructor === "Just" && __x__.__args[0].__constructor === "Just" && true) {
    const n = __x__.__args[0].__args[0];
    return n;
  }
})(m));
export default { fn, fn2 };
