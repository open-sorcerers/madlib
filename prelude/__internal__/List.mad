import Fun from "Function"
import Maybe from "Maybe"

map :: (a -> b) -> List a -> List b
export map = (f, xs) => (#- xs.map((x) => f(x)) -#)

mapWithIndex :: (a -> Number -> b) -> List a -> List b
export mapWithIndex = (f, xs) => (#- xs.map(f) -#)

concat :: List a -> List a -> List a
export concat = (xs1, xs2) => (#- xs1.concat(xs2) -#)

append :: a -> List a -> List a
export append = (v, xs) => (#- [...xs, v] -#)

last :: List a -> a
export last = (xs) => (#- xs.slice(-1)[0] -#)

init :: List a -> List a
export init = (xs) => (#- xs.slice(0, -1) -#)

nth :: Number -> List a -> Maybe.Maybe a
export nth = (i, xs) => (#- {
  const x = xs[i];
  return x === undefined
    ? Maybe.Nothing
    : Maybe.Just(x);
} -#)

reduceR :: (a -> b -> a) -> a -> List b -> a
export reduceR = (f, initial, xs) => (#- xs.reduceRight(f, initial) -#)

reduceL :: (a -> b -> a) -> a -> List b -> a
export reduceL = (f, initial, xs) => (#- xs.reduce(f, initial) -#)

filter :: (a -> Boolean) -> List a -> List a
export filter = (predicate, xs) => (#- xs.filter(predicate) -#)

find :: (a -> Boolean) -> List a -> Maybe.Maybe a
export find = (predicate, xs) => (#- {
  const found = xs.find(predicate);
  if (found === undefined) {
    return Maybe.Nothing
  }
  else {
    return Maybe.Just(found)
  }
} -#)

len :: List a -> Number
export len = (xs) => (#- xs.length -#)

reject :: (a -> Boolean) -> List a -> List a
export reject = (predicate, xs) => (#- xs.filter(Fun.complement(predicate)) -#)

slice :: Number -> Number -> List a -> List a
export slice = (start, end, xs) => (#- xs.slice(start, end) -#)

isEmpty :: List a -> Boolean
export isEmpty = (xs) => len(xs) == 0

uniqueBy :: (a -> a -> Boolean) -> List a -> List a
export uniqueBy = (f, xs) => where(xs)
  is [curr, ...tail]:
    where(find(f(curr), tail)) {
      is Maybe.Just _ : uniqueBy(f, tail)
      is Maybe.Nothing: [curr, ...uniqueBy(f, tail)]
    }
  is [l]: [l]
  is _  : []
