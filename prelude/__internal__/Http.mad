import W from "Wish"
import B from "Binary"

export data Response = Response { body :: Body }

export data Body = TextBody String
          | BinaryBody B.ByteArray

#- import https from "https" -#

get :: String -> W.Wish e Response
export get = (url) => (#- {
  return W.Wish((reject, grant) => {
    const req = https.request(url, (response) => {
      if (response.statusCode === 302) {
        W.fulfill(reject, grant, get(response.headers.location))
      }
      else {
        console.log(response.headers)
        const contentType = response.headers["content-type"];
        const isBinary = contentType === "application/zip"
        let chunks = isBinary ? [] : "";

        response.on('data', (chunk) => {
          if (isBinary) {
            chunks.push(chunk);
          }
          else {
            chunks = chunks + chunk;
          }
        });

        response.on('end', () => {
          if (isBinary) {
            const buffer = Buffer.concat(chunks);
            const ui8 = new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint8Array.BYTES_PER_ELEMENT);
            grant(Response({ body: BinaryBody(B.ByteArray(ui8)) }));
          }
          else {
            grant(Response({ body: TextBody(chunks) }));
          }
        });
      }

    });
    req.on('error', reject)
    req.end();
  });
} -#)
