import L from "List"
import Maybe from "Maybe"
import T from "Tuple"

export data Map k v = Map_ (List <k, v>)


fromList :: List (<k, v>) -> Map k v
export fromList = pipe(
  L.uniqueBy((a, b) => T.fst(a) == T.fst(b)),
  Map_
)


empty :: Map k v
export empty = fromList([])


insert :: k -> v -> Map k v -> Map k v
export insert = (k, v, m) => (where(m)
  is Map_ items:
    L.reject(
      (item) => (where(item)
        is <kk, v>: kk == k
      )
      , items
    )
    |> L.append(<k, v>)
    |> Map_
)


get :: k -> Map k v -> Maybe.Maybe v
export get = (k, m) => (where(m)
  is Map_ items:
    L.find(
      (item) => (where(item)
        is <kk, v>: k == kk
      ),
      items
    )
    |> Maybe.map(T.snd)
)


keys :: Map k v -> List k
export keys = (m) => (where(m)
  is Map_ items: L.map(T.fst, items)
)


values :: Map k v -> List v
export values = (m) => (where(m)
  is Map_ items: L.map(T.snd, items)
)


len :: Map k v -> Number
export len = (m) => (m |> keys |> L.len)


map :: (v -> w) -> Map k v -> Map k w
export map = (fn, x) => where (x)
  is Map_ items: L.map((i) => <T.fst(i), fn(T.snd(i))>, items) |> fromList


mapWithKey :: (k -> v -> w) -> Map k v -> Map k w
export map = (fn, x) => where (x)
  is Map_ items:
    L.map((i) => <T.fst(i), fn(T.fst(i), T.snd(i))>, items) |> fromList


merge :: Map k v -> Map k v -> Map k v
export merge = (a, b) => where(<a, b>)
  is <Map_ itemsA, Map_ itemsB>: L.concat(itemsA, itemsB) |> fromList
