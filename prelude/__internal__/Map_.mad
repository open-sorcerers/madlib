import IO from "IO"
import Maybe from "Maybe"

export data Map k v = Map_ k v


empty :: Map k v
export empty = (#- new Map() -#)


of :: k -> v -> Map k v
export of = (k, v) => (#- {
  const m = new Map();
  m.set(k, v);
  return m;
} -#)


insert :: k -> v -> Map k v -> Map k v
export insert = (k, v, map) => (#- {
  const copy = empty
  Array.from(map.keys()).forEach((k) => {
    copy.set(k, map.get(k))
  })
  copy.set(k, v)
  return copy
} -#)


get :: k -> Map k v -> Maybe.Maybe v
export get = (k, map) => (#- {
  const got = map.get(k);
  if (got === undefined) {
    return Maybe.Nothing()
  }
  else {
    return Maybe.Just(got)
  }
} -#)


keys :: Map k v -> List k
export keys = (map) => (#- Array.from(map.keys()) -#)


values :: Map k v -> List k
export values = (map) => (#- Array.from(map.values()) -#)

e = empty
e2 = insert(3, 4, e)
e3 = empty

IO.log(e)
IO.log(e2)
IO.log(e3)
