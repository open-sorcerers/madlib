import { andDo } from "Monad"

export data Wish e a = Wish ((e -> ()) -> (a -> ()) -> ())


instance Functor (Wish e) {
  map = (f, m) => Wish((bad, good) =>
    where(m)
      is Wish run: run(bad, (x) => (good(f(x))))
  )
}

instance Applicative (Wish e) {
  pure = (a) => Wish((bad, good) => good(a))

  ap = (mf, m) => Wish((bad, good) => where(<mf, m>)
    is <Wish runMF, Wish runM>:
      runM(
        bad,
        (x) => runMF(
          bad,
          (f) => good(f(x))
        )
      )
  )
}


instance Monad (Wish e) {
  of = pure

  chain = (f, m) => Wish((bad, good) =>
    where(m) 
      is Wish run:
        run(bad, (x) =>
          where(f(x))
            is Wish r: r(bad, good)
        )
  )
}


mapRej :: (e -> f) -> Wish e a -> Wish f a
export mapRej = (f, m) => (
  Wish((bad, good) => (
    where(m) {
      is Wish run: run((x) => (bad(f(x))), good)
    }
  ))
)


chainRej :: (e -> Wish f b) -> Wish e a -> Wish f b
export chainRej = (f, m) => (
  Wish((bad, good) => (
    where(m) {
      is Wish run: run((x) => (
        where(f(x)) {
          is Wish r: r(bad, good)
        }
      ), good)
    }
  ))
)


bad :: e -> Wish e a
export bad = (e) => (
  Wish((bad, good) => (bad(e)))
)


getWishFn = (w) => (where(w)
  is Wish fn: fn
)


parallel :: List (Wish e a) -> Wish e (List a)
export parallel = (wishes) => (
  Wish((bad, good) => (#- {
    const l = wishes.length
    let ko = false;
    let ok = 0;
    const out = new Array(l);
    const next = j => (j === l && good(out));
    const fork = (w, j) => (getWishFn(w)(
      e => ko || (bad(e), ko = true),
      x => ko || (out[j] = x, next(++ok))
    ));
    wishes.forEach(fork);
  } -#))
)


fulfill :: (e -> ()) -> (a -> ()) -> Wish e a -> ()
export fulfill = (bad, good, m) => (where(m) {
  is Wish run: run(bad, good)
})

after :: Number -> a -> Wish e a
export after = (time, a) => (#- {
  return Wish((bad, good) => {
    setTimeout(() => good(a), time);
  })
} -#)


// y = ap(pure((x) => x + 1), of(1)) |> fulfill((x) => (()), (x) => (#- console.log(x) -#))

// w :: Wish e Number
// w = chain((x) => of(x + 1), of(3))

// w |> fulfill((_) => (()), (x) => (#- console.log(x) -#))

// andDo(Wish((bad, good) => good("ok")), Wish((bad, good) => good(true)))
