export alias Wish e a = (e -> m) -> (a -> n) -> ()

of :: a -> Wish e a
export of = (a) => ((bad, good) => (good(a)))

bad :: e -> Wish e a
export bad = (e) => ((nope, yes) => (nope(e)))


// map :: (a -> b) -> ((e -> m) -> (a -> n) -> ()) -> ((e -> m) -> (b -> n) -> ())
map :: (a -> b) -> Wish e a -> Wish e b
export map = (f, run) => (
  (bad, good) => run(bad, (x) => good(f(x)))
)

mapRej :: (e -> f) -> Wish e a -> Wish f a
export mapRej = (f, run) => (
  (bad, good) => run((x) => bad(f(x)), good)
)

chain :: (a -> Wish f b) -> Wish e a -> Wish f b
export chain = (f, run) => ((bad, good) => run(bad, (x) => f(x)(bad, good)))

chainRej :: (e -> Wish f b) -> Wish e a -> Wish f b
export chainRej = (f, run) => (
  (bad, good) => (
    run((x) => (f(x)(bad, good)), good)
  )
)

andDo :: Wish f b -> Wish e a -> Wish f b
export andDo = (m, run) => chain((a) => m, run)

parallel :: List (Wish e a) -> Wish e (List a)
export parallel = (wishes) => (
  (bad, good) => (#- {
    const l = wishes.length
    let ko = false;
    let ok = 0;
    const out = new Array(l);
    const next = j => (j === l && good(out));
    const fork = (w, j) => (w(
      e => ko || (bad(e), ko = true),
      x => ko || (out[j] = x, next(++ok))
    ));
    wishes.forEach(fork);
  } -#)
)

fulfill :: (e -> m) -> (a -> n) -> Wish e a -> ()
export fulfill = (bad, good, run) => (
  run(bad, good)
)

after :: Number -> a -> Wish e a
export after = (time, a) => (#- {
  return (bad, good) => {
    setTimeout(() => good(a), time);
  }
} -#)

