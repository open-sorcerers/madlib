import _ from "Monad"

export data Either e a
  = Left e
  | Right a

instance Functor (Either e) {
  map = (f) => where
    is Right a: Right(f(a))
    is Left  e: Left(e)
}

instance Applicative (Either e) {
  pure = Right
  ap = (mf, m) => where(mf)
    is Left e : Left(e)
    is Right f: map(f, m)
}

instance Monad (Either e) {
  of = pure
  chain = (f) => where
    is Right a: f(a)
    is Left  e: Left(e)
}

mapLeft :: (e -> f) -> Either e a -> Either f a
export mapLeft = (f, m) => (where(m) {
  is Right a: Right(a)
  is Left  e: Left(f(e))
})

isLeft :: Either e a -> Boolean
export isLeft = (either) => (where(either) {
  is Left _: true
  is _     : false
})

fromRight :: a -> Either e a -> a
export fromRight = (a, either) => (where(either) {
  is Right x: x
  is _      : a
})
