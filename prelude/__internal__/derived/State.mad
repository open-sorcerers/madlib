import T from "./Tuple"
import IO from "../atomic/IO"

// State Monad
// Example usage:
// addFromState :: Number -> State Number Number
// addFromState = (x) =>
//   get |> chain((s) => of(s + x))

// setState :: Number -> Number -> State Number Number
// setState = (s, x) => put(s) |> chain((a) => of(x))

// s :: State Number Number
// s = of(3)
//   |> chain(addFromState)
//   |> chain(setState(30))
//   |> chain(addFromState)
//   |> map((x) => x * 2)

// run(s, 7) |> IO.log

export data State s a = State (s -> <a, s>)


run :: State s a -> s -> <a, s>
export run = (m, initialState) =>
  where(m)
    is State f: f(initialState)

map :: (a -> b) -> State s a -> State s b
export map = (f, m) => State((state) => {
  inner = run(m, state)
  return <f(T.fst(inner)), T.snd(inner)>
})

chain :: (a -> State s b) -> State s a -> State s b
export chain = (f, m) => State((state) => {
  inner = run(m, state)
  newState = f(T.fst(inner))
  return where(newState)
    is State ff: ff(T.snd(inner))
})

get :: State s s
export get = State((s) => <s, s>)

put :: s -> State s ()
export put = (s) => State((_) => <(), s>)

modify :: (s -> s) -> State s ()
export modify = (f) => State((s) => <(), f(s)>)

of :: a -> State s a
export of = (a) => State((s) => <a, s>)
